const fs=require("fs"),jsPath="js",cssPath="css",libPath="lib",publicPath="./dist",htmlPath="./",imgPath="image",filesReplace=[];function copyFile(path,isAll){fileState(`./dist/${path}`),fs.readdir(`./${path}`,"utf-8",(function(err,data){data.forEach(item=>{if(item.indexOf("min")>0||isAll){const fileData=fs.readFileSync(`${path}/${item}`);fs.writeFileSync(`./dist/${path}/${item}`,fileData)}else filesReplace.push(`${path}/${item}`)})}))}function copyHtml(path){fs.readdir(`${path}`,"utf-8",(function(err,data){data.forEach(item=>{if(item.indexOf("html")>0){let fileData=fs.readFileSync(`${path}/${item}`,"utf-8");filesReplace.forEach(key=>{const fileName=key.replace(/(\.js|\.css)/,".min$1");fileData=fileData.replace(key,`${fileName}`)}),fs.writeFileSync(`./dist/${item}`,fileData)}})}))}function fileState(path){return new Promise((function(resolve,reject){fs.stat(path,(function(error,stats){if(error)return fs.mkdir(path,{recursive:!0},err=>{if(err)return reject(err);resolve(!0)}),!1;resolve(!0)}))}))}fs.rmSync("./dist",{force:!0,recursive:!0}),fileState("./dist").then(res=>{res&&(copyFile("image",!0),copyFile("js"),copyFile("css"),copyFile("lib",!0),copyHtml("./"))});